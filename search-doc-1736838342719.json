{"searchDocs":[{"title":"About","type":0,"sectionRef":"#","url":"/Scrypt/docs/About","content":"","keywords":"","version":"Next"},{"title":"What is Scrypt?​","type":1,"pageTitle":"About","url":"/Scrypt/docs/About#what-is-scrypt","content":" Scrypt is a lightweight Roblox development framework. Scrypt aims to be an easy-to-use framework to power your Roblox projects! It includes several feature to improve your workflow over vanilla Luau. Those include:  Lazily loaded modulesBuilt in networkingSupport for three types of modules (Services, Controllers, Shared modules)Built-in Utilities (Custom events and functions, roblox service access, and more)  Scrypt is planned on being supported for many years to come and much more is planned to be added!  ","version":"Next","tagName":"h2"},{"title":"Functional Programming​","type":1,"pageTitle":"About","url":"/Scrypt/docs/About#functional-programming","content":" Scrypt also aims to promote functional programming. While the basic usage of Scrypt is not purely functional, its internals were built using strong functional foundations and encourages developers to use functional programming in their services and controllers as much as possible. Scrypt also includes a small bulit-in Utils library which contains some common pure functions:  FilterMapReduce  Functional programming is what is known as a programming paradigm. A paradigm controls the structure or 'style' of how code is written. Some common paradigms include: object-oriented, imperative, procedural, and of course, functional. The functional paradigm has a few main properties that define what it exactly is. If you want to go in depth on what these are, you can look further into it but the main pillars of functional programming are:  Data is immutableFunctions are pureHigher order and first class functionsReduced (or no) side effects  More coming soon! ","version":"Next","tagName":"h3"},{"title":"ClientNetwork","type":0,"sectionRef":"#","url":"/Scrypt/api/ClientNetwork","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#types","content":" ","version":null,"tagName":"h2"},{"title":"Packet​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#Packet","content":"&lt;/&gt; type Packet = number | string | {ClientPacketData} | boolean | Instance | buffer | Player | CFrame | Vector3 | Vector2 | Color3 | UDim2 | UDim | Enum | BrickColor   ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#functions","content":" ","version":null,"tagName":"h2"},{"title":"SendPacket​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#SendPacket","content":"&lt;/&gt; ClientNetwork.SendPacket( Name: string, PacketData: ClientPacketData ) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#ClientPacketData","content":"interface ClientPacketData { Data: Packet Reliable: boolean }  Sends data to the server.  ","version":null,"tagName":"h3"},{"title":"PingServer​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#PingServer","content":"&lt;/&gt; ClientNetwork.PingServer( Name: string, IsReliable: boolean ) → () Pings the server. This function should be used when you want to communicate with the server but don't want to send any data.  ","version":null,"tagName":"h3"},{"title":"ListenForPacket​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#ListenForPacket","content":"&lt;/&gt; ClientNetwork.ListenForPacket( Name: string, IsReliable: boolean, Callback: (...Packet) → () ) → RBXScriptConnection  Listens for data from the server.  ","version":null,"tagName":"h3"},{"title":"RequestPacket​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#RequestPacket","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientNetwork.RequestPacket( Name: string, Packet: Packet ) → Packet Sends and requests data from the server.  ","version":null,"tagName":"h3"},{"title":"EmptyRequest​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#EmptyRequest","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientNetwork.EmptyRequest(Name: string) → Packet Requests a packet from the server without sending data. This function should be used when you want to request a response from the server but don't want to send any data. ","version":null,"tagName":"h3"},{"title":"Services","type":0,"sectionRef":"#","url":"/Scrypt/docs/Services","content":"","keywords":"","version":"Next"},{"title":"What are Services?​","type":1,"pageTitle":"Services","url":"/Scrypt/docs/Services#what-are-services","content":" Services serve as server-side modules that enable you to manage specific behaviors within your project (can be considered controllers but server-side). Services, such as those responsible for player data management, focus exclusively on managing server operations.  Some examples of services:  DataService.luauGameRoundsService.luauCommandService.luauPurchaseService.luau  Each service module bundles all related functionality, containing the necessary code and features required for its intended use case. It should NOT have functions relating to other features.  ","version":"Next","tagName":"h2"},{"title":"Services vs Shared Modules​","type":1,"pageTitle":"Services","url":"/Scrypt/docs/Services#services-vs-shared-modules","content":" In contrast to services, which are tailored to manage specific server-side features and behaviors, shared modules serve as reusable code that can be leveraged by both client-side and server-side components. A good example of how shared modules can be useful is creating a custom string library with functions not included by default in Luau, or converting a frequently used function into a module containing the snippet for easy reuse.  Some examples of shared modules:  StringUtils.luauCreateInstanceTree.luauGameConfig.luau (settings module)GameUtils.luau  By categorizing modules into distinct types, such as controllers and shared modules, developers can maintain an organized project structure that promotes clarity and efficiency.  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Services","url":"/Scrypt/docs/Services#usage","content":" Services are extremely easy to setup and use. To get started, ensure you have Scrypt installed into your studio session. Next, add a ModuleScript into ServerScriptService/Services (use custom path if specified).  tip Scrypt searches through all non-script instances for services so you can use folders to separate servers based on feature.  Give it a name, preferably with a suffix of &quot;Service&quot; to follow the standard naming convention. We can start writing our code like any regular ModuleScript. Let's give it some placeholder functions:  --!strict --@server local TestService = {} function TestService.Run() print(&quot;TEST RUNNING&quot;) end function TestService.Cancel() print(&quot;TEST CANCELED&quot;) end function TestService.Get(Name: string): string return tostring(Name) end return TestService   danger Modules cannot yield while being initially loaded. This means you cannot have global variables with WaitForChild or anything that will yield the current thread. This also means that if you need to access the Scrypt framework in a service, shared module, or controller, you should not need to wait for the framework to load.  To access the service, in a separate ServerScript, simply run the GetService function with the name of the controller passed as an argument:  --!strict --@server local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local TestService = Scrypt:GetService(&quot;TestService&quot;) print(TestService.Get(&quot;TEST&quot;)) --&gt; TEST   tip All services are lazily loaded! This means services are only loaded when they are needed instead of all of your scripts being loaded at runtime. ","version":"Next","tagName":"h2"},{"title":"Controllers","type":0,"sectionRef":"#","url":"/Scrypt/docs/Controllers","content":"","keywords":"","version":"Next"},{"title":"What are Controllers?​","type":1,"pageTitle":"Controllers","url":"/Scrypt/docs/Controllers#what-are-controllers","content":" Controllers serve as client-side modules that enable you to manage specific behaviors within your project (can be considered services but client-side). Often, controllers are associated with the player, managing behavior such as the Camera, User Input, and other components.  Some examples of controllers:  CameraController.luauUserInputController.luauCharacterController.luauUIController.luau  Each controller module bundles all related functionality, containing the necessary code and features required for its intended use case. It should NOT have functions relating to other features.  ","version":"Next","tagName":"h2"},{"title":"Controllers vs Shared Modules​","type":1,"pageTitle":"Controllers","url":"/Scrypt/docs/Controllers#controllers-vs-shared-modules","content":" In contrast to controllers, which are tailored to manage specific client-side features and behaviors, shared modules serve as reusable code that can be leveraged by both client-side and server-side components. A good example of how shared modules can be useful is creating a custom string library with functions not included by default in Luau, or converting a frequently used function into a module containing the snippet for easy reuse.  Some examples of shared modules:  StringUtils.luauCreateInstanceTree.luauGameConfig.luau (settings module)GameUtils.luau  By categorizing modules into distinct types, such as controllers and shared modules, developers can maintain an organized project structure that promotes clarity and efficiency.  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Controllers","url":"/Scrypt/docs/Controllers#usage","content":" Controllers are extremely easy to setup and use. To get started, ensure you have Scrypt installed into your studio session. Next, add a ModuleScript into ReplicatedStorage/Controllers (use custom path if specified).  tip Scrypt searches through all non-script instances for controllers so you can use folders to separate controllers based on feature.  Give it a name, preferably with a suffix of &quot;Controller&quot; to follow the standard naming convention. We can start writing our code like any regular ModuleScript. Let's give it some placeholder functions:  --!strict --@client local TestController = {} function TestController.Run() print(&quot;TEST RUNNING&quot;) end function TestController.Cancel() print(&quot;TEST CANCELED&quot;) end function TestController.Get(Name: string): string return tostring(Name) end return TestController   danger Modules cannot yield while being initially loaded. This means you cannot have global variables with WaitForChild or anything that will yield the current thread. This also means that if you need to access the Scrypt framework in a service, shared module, or controller, you should not need to wait for the framework to load.  To access the controller, in a separate LocalScript, simply run the GetController function with the name of the controller passed as an argument:  --!strict --@client local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local TestController = Scrypt.GetController(&quot;TestController&quot;) print(TestController.Get(&quot;TEST&quot;)) --&gt; TEST   tip All controllers are lazily loaded! This means controllers are only loaded when they are needed instead of all of your scripts being loaded at runtime. ","version":"Next","tagName":"h2"},{"title":"ServerNetwork","type":0,"sectionRef":"#","url":"/Scrypt/api/ServerNetwork","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#types","content":" ","version":null,"tagName":"h2"},{"title":"Packet​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#Packet","content":"&lt;/&gt; type Packet = =number | string | {Packet} | boolean | Instance | buffer | Player | CFrame | Vector3 | Vector2 | Color3 | UDim2 | UDim | Enum | BrickColor   ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#functions","content":" ","version":null,"tagName":"h2"},{"title":"SendPacketToClient​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#SendPacketToClient","content":"&lt;/&gt; ServerNetwork.SendPacketToClient( Name: string, PacketData: ServerPacketData ) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#ServerPacketData","content":"interface ServerPacketData { Address: Player Reliable: boolean Data: Packet }  Sends data to a specific player from the server.  ","version":null,"tagName":"h3"},{"title":"SendPacketToAllClients​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#SendPacketToAllClients","content":"&lt;/&gt; ServerNetwork.SendPacketToAllClients( Name: string, Packet: Packet, IsReliable: boolean ) → () Sends data to all clients in a server.  ","version":null,"tagName":"h3"},{"title":"PingClient​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#PingClient","content":"&lt;/&gt; ServerNetwork.PingClient( Name: string, Address: Player , IsReliable: boolean ) → () Pings a specific client. This function should be used when you want to communicate with the client but don't want to send any data.  ","version":null,"tagName":"h3"},{"title":"PingAllClients​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#PingAllClients","content":"&lt;/&gt; ServerNetwork.PingAllClients( Name: string, IsReliable: boolean ) → () Pings all clients. This function should be used when you want to communicate with all clients but don't want to send any data.  ","version":null,"tagName":"h3"},{"title":"ListenForPacket​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#ListenForPacket","content":"&lt;/&gt; ServerNetwork.ListenForPacket( Name: string, IsReliable: boolean, Callback: ( Address: Player , ...Packet? ) → () ) → RBXScriptConnection  Listens for data from the client.  ","version":null,"tagName":"h3"},{"title":"ListenForRequest​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#ListenForRequest","content":"&lt;/&gt; ServerNetwork.ListenForRequest( Name: string, Callback: ( Address: Player , ...Packet? ) → ...any ) → () Listens for a request from the client. The client expects a return value so make sure your function returns something. ","version":null,"tagName":"h3"},{"title":"ScryptServer","type":0,"sectionRef":"#","url":"/Scrypt/api/ScryptServer","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#types","content":" ","version":null,"tagName":"h2"},{"title":"Service​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Service","content":"&lt;/&gt; interface Service { [Name]: string [Service]: any }   ","version":null,"tagName":"h3"},{"title":"Result<T>​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Result<T>","content":"&lt;/&gt; type Result&lt;T&gt; = { Success: boolean, Value: T?, Error: string? }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"RegExp​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#RegExp","content":"&lt;/&gt; ScryptServer.RegExp: RegularExpressionClass Regular expressions module published by Roblox. See more information in RegEx.lua.  ","version":null,"tagName":"h3"},{"title":"Promise​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Promise","content":"&lt;/&gt; ScryptServer.Promise: PromiseClass Promise module created by evaera.  ","version":null,"tagName":"h3"},{"title":"Services​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Services","content":"&lt;/&gt; ScryptServer.Services: {[Name]: Instance } Contains a dictionary of Roblox services.  ","version":null,"tagName":"h3"},{"title":"Utils​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Utils","content":"&lt;/&gt; ScryptServer.Utils: {(...any) → ...any} Returns the Utils module. Contains some basic pure functions.  ","version":null,"tagName":"h3"},{"title":"ServerNetwork​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#ServerNetwork","content":"&lt;/&gt; ScryptServer.ServerNetwork: ServerNetwork Returns the ServerNetwork class. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"Symbol​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Symbol","content":"&lt;/&gt; ScryptServer.Symbol(Name: string?) → Symbol ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Symbol","content":"type Symbol = typeof(newproxy(true)) &amp; {[string]: any}    ","version":null,"tagName":"h3"},{"title":"CreateSignal​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#CreateSignal","content":"This item only works when running on the server. Server &lt;/&gt; ScryptServer.CreateSignal( Name: string, IsPrivate: boolean? ) → Signal Creates and returns a Signal. This is an implementation of BindableEvents. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the event to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"CreateFunction​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#CreateFunction","content":"This item only works when running on the server. Server &lt;/&gt; ScryptServer.CreateFunction( Name: string, IsPrivate: boolean? ) → Function Creates and returns a Function. This is an implementation of BindableFunctions. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the function to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"GetService​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#GetService","content":"This item only works when running on the client. Client &lt;/&gt; ScryptServer.GetService(Name: string) → any Loads and returns a Service by name. Services are lazily loaded so they are only run when this function is invoked.  ","version":null,"tagName":"h3"},{"title":"GetModule​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#GetModule","content":"This item only works when running on the client. Client &lt;/&gt; ScryptServer.GetModule(Name: string) → any Loads and returns a shared module by name. Shared modules are lazily loaded so they are only run when this function is invoked.  ","version":null,"tagName":"h3"},{"title":"Init​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Init","content":"This item only works when running on the server. Server &lt;/&gt; ScryptServer.Init(EnvironmentLocation: Instance? ) → Signal Initializes the framework and loads all shared modules, libraries, and services. This function returns an event that fires once everything has been loaded. You can optionally specify the location of environment modules. By default, Scrypt assumes ServerScriptService. Usage example: local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Scrypt&quot;)) Scrypt.Init():Wait() print(Scrypt.ServicesRBX.ReplicatedStorage) -&gt; ReplicatedStorage CAUTION If you are adding libraries, shared modules, or services, you do not have to wait for the framework to load. Doing so can cause issues. ","version":null,"tagName":"h3"},{"title":"ScryptClient","type":0,"sectionRef":"#","url":"/Scrypt/api/ScryptClient","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#types","content":" ","version":null,"tagName":"h2"},{"title":"Controller​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Controller","content":"&lt;/&gt; interface Controller { [Name]: string [Controller]: any }   ","version":null,"tagName":"h3"},{"title":"Result<T>​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Result<T>","content":"&lt;/&gt; type Result&lt;T&gt; = { Success: boolean, Value: T?, Error: string? }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#properties","content":" ","version":null,"tagName":"h2"},{"title":"RegExp​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#RegExp","content":"&lt;/&gt; ScryptClient.RegExp: RegularExpressionClass Regular expressions module published by Roblox. See more information in RegEx.lua.  ","version":null,"tagName":"h3"},{"title":"Promise​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Promise","content":"&lt;/&gt; ScryptClient.Promise: PromiseClass Promise module created by evaera.  ","version":null,"tagName":"h3"},{"title":"LocalPlayer​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#LocalPlayer","content":"&lt;/&gt; ScryptClient.LocalPlayer: Player    ","version":null,"tagName":"h3"},{"title":"Services​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Services","content":"&lt;/&gt; ScryptClient.Services: {[Name]: Instance } Contains a dictionary of Roblox services.  ","version":null,"tagName":"h3"},{"title":"Utils​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Utils","content":"&lt;/&gt; ScryptClient.Utils: {(...any) → ...any} Returns the Utils module. Contains some basic pure functions.  ","version":null,"tagName":"h3"},{"title":"ClientNetwork​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#ClientNetwork","content":"&lt;/&gt; ScryptClient.ClientNetwork: ClientNetwork Returns the ClientNetwork class. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"CreateSignal​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#CreateSignal","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.CreateSignal( Name: string, IsPrivate: boolean? ) → Signal Creates and returns a Signal. This is an implementation of BindableEvents. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the event to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"CreateFunction​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#CreateFunction","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.CreateFunction( Name: string, IsPrivate: boolean? ) → Function Creates and returns a Function. This is an implementation of BindableFunctions. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the function to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"GetController​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#GetController","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.GetController(Name: string) → any Loads and returns a controller by name. Controllers are lazily loaded so they are only run when this function is invoked.  ","version":null,"tagName":"h3"},{"title":"GetModule​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#GetModule","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.GetModule(Name: string) → any Loads and returns a shared module by name. Shared modules are lazily loaded so they are only run when this function is invoked.  ","version":null,"tagName":"h3"},{"title":"Init​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Init","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.Init(EnvironmentLocation: Instance? ) → Signal Initializes the framework and loads all shared modules, libraries, and controllers. This function returns an event that fires once everything has been loaded. You can optionally specify the location of environment modules. By default, Scrypt assumes ReplicatedStorage. Usage example: local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Scrypt&quot;)) Scrypt.Init():Wait() print(Scrypt.LocalPlayer) -&gt; zblox164 CAUTION If you are adding libraries, shared modules, or controllers, you do not have to wait for the framework to load. Doing so can cause issues.  ","version":null,"tagName":"h3"},{"title":"Symbol​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Symbol","content":"&lt;/&gt; ScryptClient.Symbol(Name: string?) → Symbol ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Symbol","content":"type Symbol = typeof(newproxy(true)) &amp; {[string]: any}   ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Scrypt/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#installation","content":" Installing Scrypt only requires a few simple steps! To start the installation process, you'll first need to get the Scrypt framework. Currently, there are two methods to do this:  Download the .rbxm file as provided in the GitHub repositoryGet Scrypt directly from the Creator Store  Method 1​  Go to the main branch of the official Scrypt repository and download the .rbxm file named 'ScryptModel'. Once you have downloaded the model, simply drag it into your studio session.  Method 2​  If you opt for the second method, you can find Scrypt on the Creator Store here. You should be able to add the framework to your inventory and import it through the toolbox afterwards.    Once you've imported Scrypt into your project, you can begin the next step. Scrypt should come with a root folder that contains several items, each needs to be moved:  Scrypt moduleServices folderControllers folderShared folder  After you've moved all the framework components to the proper locations, you can begin using the framework.  ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#basic-usage","content":" The basic usage for Scrypt is quite simple. First, require the module just like any other ModuleScript. After that, we can run the .Init function and wait for the framework to load:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait()   Now that you've properly initialized Scrypt, we can go through some basic features and their usage. Let's start with features that replace a default workflow.  ","version":"Next","tagName":"h2"},{"title":"Bindables Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#bindables-replacement","content":" Scrypt has a built in version of both BindableFunctions as well as BindableEvents. Creating events and functions is quite simple:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local Event = Scrypt.CreateSignal(&quot;Event&quot;) local Function = Scrypt.CreateFunction(&quot;Function&quot;)   Using events should be identical to regular events. Functions are slightly different.  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local Event = Scrypt.CreateSignal(&quot;Event&quot;) local Connection Connection = Event:Connect(function(Data: any) print(Data) --&gt; This is a test end) Event:Fire(&quot;This is a test&quot;) Connection:Disconnect() -- clean up -------------------------------------- local Function = Scrypt.CreateFunction(&quot;Function&quot;) Function:OnInvoke(function(Data: any) return not Data end) local Return = Function:Invoke(true) print(Return) --&gt; false Function:Destroy() -- clean up   ","version":"Next","tagName":"h3"},{"title":"GetService() Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#getservice-replacement","content":" Scrypt loads most Roblox services after you run .Init rendering the use of game:GetService obsolete when using Scrypt. To access a service, simply index the Services dictionary with the service you want to get. For example:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local Players = Scrypt.Services.Players local ReplicatedStorage = Scrypt.Services.ReplicatedStorage   info If you need a service that hasn't been added to the dictionary, you can manually add it in the RBXServices module located in path: Scrypt/Internal. Most services are added, however if Roblox adds a new service and Scrypt hasn't been updated yet, you may need to add it manually if you want to access it through Scrypt.  ","version":"Next","tagName":"h3"},{"title":"Remotes Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#remotes-replacement","content":" Remotes are used whenever you need to communicate with the server from the client or client from the server. Scrypt offers an implementation of remotes. Here is a basic usage example, however for more detailed information, please see the API.  --@client local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() -- To Server local Packet = { Data = &quot;Data being sent to server&quot;, Reliable = true } Scrypt.ClientNetwork.SendPacket(&quot;Send&quot;, Packet) local RequestToServer = Scrypt.ClientNetwork.RequestPacket(&quot;Request&quot;, &quot;Data being sent to server&quot;) print(RequestToServer) --&gt; Data received! -- From Server local FromServer FromServer = Scrypt.ClientNetwork.ListenForPacket(&quot;Receive&quot;, true, function(Data) print(Data) --&gt; Data being sent from server end)   --@server local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Scrypt&quot;)) Scrypt.Init():Wait() -- Data from client local DataFromClient DataFromClient = Scrypt.ServerNetwork.ListenForPacket(&quot;Send&quot;, true, function(Address: Player, Data) print(&quot;Incoming data from &quot; .. tostring(Address) .. &quot;: &quot; .. tostring(Data)) end) -- Request from client local RequestFromClient RequestFromClient = Scrypt.ServerNetwork.ListenForRequest(&quot;Request&quot;, function(Address: Player, Data) return &quot;Data received!&quot; end) -- Data to client Scrypt.Services.Players.PlayerAdded:Connect(function(Player: Player) local Packet = { Data = &quot;Data being sent from server&quot;, Reliable = true, Address = Player } Scrypt.ServerNetwork.SendPacketToClient(&quot;Receive&quot;, Packet) end)   ","version":"Next","tagName":"h3"},{"title":"require() Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#require-replacement","content":" So far the examples have only shown the built in features of Scrypt. You might be asking yourself, &quot;how can I build a game with this?&quot;. The answer is you can use Scrypt to lazily load game modules for you. To utilize this, create a new ModuleScript under ReplicatedStorage/Shared/Modules. You can make this module contain whatever you want. For now, let's just use this as an example:  --!strict --@shared local BasicMath = {} function BasicMath.Add(a: number, b: number): number return a + b end function BasicMath.Subtract(a: number, b: number): number return a - b end function BasicMath.Multiply(a: number, b: number): number return a * b end function BasicMath.Divide(a: number, b: number): number return a / b end return BasicMath   To access this module from other scripts, normally you have to reference the module and then require it to use it. With Scrypt, all you have to do, is run the GetModule function with name of the module passed as an argument. In this case, the module is named &quot;BasicMath&quot;. In a test script, we can access it with:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local BasicMath = Scrypt.GetModule(&quot;BasicMath&quot;) print(BasicMath.Add(64, 100)) --&gt; 164 print(BasicMath.Subtract(228, 64)) --&gt; 164 print(BasicMath.Multiply(1, 164)) --&gt; 164 print(BasicMath.Divide(328, 2)) --&gt; 164   You don't only have to place your game modules in the Shared/Modules folder. Scrypt loads modules from all of the following locations by default, each with their own purpose:  ReplicatedStorage/Shared/Modules (Server &amp; Client) Modules that are used with both the server and client ReplicatedStorage/Shared/Libraries (Server &amp; Client) Modules that contain specific functions for a specific purpose. For example, a custom quaternion library. ServerScriptService/Services (Server) Game service modules (Services docs). ReplicatedStorage/Controllers (Client) Game controller modules (Controller docs).  tip All modules are lazily loaded! This means modules are only loaded when they are needed instead of all of your scripts being loaded at runtime. Services and Controllers have their own 'Get' functions. See the API or specific doc pages for more details.    More coming soon! ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}