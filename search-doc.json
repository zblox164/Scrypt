{"searchDocs":[{"title":"ClientNetwork","type":0,"sectionRef":"#","url":"/Scrypt/api/ClientNetwork","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#types","content":" ","version":null,"tagName":"h2"},{"title":"Packet​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#Packet","content":"&lt;/&gt; type Packet = number | string | {ClientPacketData} | boolean | Instance | buffer | Player | CFrame | Vector3 | Vector2 | Color3 | UDim2 | UDim | Enum | BrickColor    ","version":null,"tagName":"h3"},{"title":"ClientPacketData​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#ClientPacketData","content":"&lt;/&gt; interface ClientPacketData { Data: Packet Reliable: boolean }  INFO Currently, changing the Reliable value does not affect the type of signal that is created. In the future this will determine the type of signal created. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#functions","content":" ","version":null,"tagName":"h2"},{"title":"SendPacket​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#SendPacket","content":"&lt;/&gt; ClientNetwork.SendPacket( Name: string, Packet: ClientPacketData ) → () Sends data to the server.  ","version":null,"tagName":"h3"},{"title":"PingServer​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#PingServer","content":"&lt;/&gt; ClientNetwork.PingServer( Name: string, IsReliable: boolean ) → () Pings the server. This function should be used when you want to communicate with the server but don't want to send any data.  ","version":null,"tagName":"h3"},{"title":"ListenForPacket​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#ListenForPacket","content":"&lt;/&gt; ClientNetwork.ListenForPacket( Name: string, IsReliable: boolean, Callback: (...Packet) → () ) → RBXScriptConnection  Listens for data from the server.  ","version":null,"tagName":"h3"},{"title":"RequestPacket​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#RequestPacket","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientNetwork.RequestPacket( Name: string, Packet: Packet ) → Packet Sends and requests data from the server.  ","version":null,"tagName":"h3"},{"title":"EmptyRequest​","type":1,"pageTitle":"ClientNetwork","url":"/Scrypt/api/ClientNetwork#EmptyRequest","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientNetwork.EmptyRequest(Name: string) → Packet Requests a packet from the server without sending data. This function should be used when you want to request a response from the server but don't want to send any data. ","version":null,"tagName":"h3"},{"title":"ScryptServer","type":0,"sectionRef":"#","url":"/Scrypt/api/ScryptServer","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#types","content":" ","version":null,"tagName":"h2"},{"title":"Service​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Service","content":"&lt;/&gt; interface Service { [Name]: string [Service]: any }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"Services​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Services","content":"&lt;/&gt; ScryptServer.Services: {[string]: any} Returns all loaded Services. INFO Services are lazily loaded so just because a Service isn't contained within the Services table does not mean it cannot be accessed.  ","version":null,"tagName":"h3"},{"title":"RegExp​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#RegExp","content":"&lt;/&gt; ScryptServer.RegExp: RegularExpressionClass Regular expressions module published by Roblox. See more information in RegEx.lua.  ","version":null,"tagName":"h3"},{"title":"Promise​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Promise","content":"&lt;/&gt; ScryptServer.Promise: PromiseClass Promise module created by evaera.  ","version":null,"tagName":"h3"},{"title":"ServicesRBX​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#ServicesRBX","content":"&lt;/&gt; ScryptServer.ServicesRBX: {[Name]: Instance } Contains a dictionary of Roblox services.  ","version":null,"tagName":"h3"},{"title":"ServerNetwork​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#ServerNetwork","content":"&lt;/&gt; ScryptServer.ServerNetwork: ServerNetwork Returns the ServerNetwork class. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"Symbol​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Symbol","content":"&lt;/&gt; ScryptServer.Symbol(Name: string?) → Symbol ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Symbol","content":"type Symbol = typeof(newproxy(true)) &amp; {[string]: any}    ","version":null,"tagName":"h3"},{"title":"CreateSignal​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#CreateSignal","content":"This item only works when running on the server. Server &lt;/&gt; ScryptServer.CreateSignal( Name: string, IsPrivate: boolean? ) → Signal Creates and returns a Signal. This is an implementation of BindableEvents. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the event to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"CreateFunction​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#CreateFunction","content":"This item only works when running on the server. Server &lt;/&gt; ScryptServer.CreateFunction( Name: string, IsPrivate: boolean? ) → Function Creates and returns a Function. This is an implementation of BindableFunctions. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the function to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"Init​","type":1,"pageTitle":"ScryptServer","url":"/Scrypt/api/ScryptServer#Init","content":"This item only works when running on the server. Server &lt;/&gt; ScryptServer.Init( EnvironmentLocation: Instance? , DEBUG: boolean? ) → Signal Initializes the framework and loads all shared modules, libraries, and services. This function returns an event that fires once everything has been loaded. You can optionally specify the location of environment modules. By default, Scrypt assumes ServerScriptService. Usage example: local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Scrypt&quot;)) Scrypt.Init():Wait() print(Scrypt.ServicesRBX.ReplicatedStorage) -&gt; ReplicatedStorage CAUTION If you are adding libraries, shared modules, or services, you do not have to wait for the framework to load. Doing so can cause issues. ","version":null,"tagName":"h3"},{"title":"ScryptClient","type":0,"sectionRef":"#","url":"/Scrypt/api/ScryptClient","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#types","content":" ","version":null,"tagName":"h2"},{"title":"Controller​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Controller","content":"&lt;/&gt; interface Controller { [Name]: string [Controller]: any }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#properties","content":" ","version":null,"tagName":"h2"},{"title":"Controllers​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Controllers","content":"&lt;/&gt; ScryptClient.Controllers: {[string]: any} Returns all loaded Controllers. INFO Controllers are lazily loaded so just because a Controller isn't contained within the Controllers table does not mean it cannot be accessed.  ","version":null,"tagName":"h3"},{"title":"RegExp​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#RegExp","content":"&lt;/&gt; ScryptClient.RegExp: RegularExpressionClass Regular expressions module published by Roblox. See more information in RegEx.lua.  ","version":null,"tagName":"h3"},{"title":"Promise​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Promise","content":"&lt;/&gt; ScryptClient.Promise: PromiseClass Promise module created by evaera.  ","version":null,"tagName":"h3"},{"title":"LocalPlayer​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#LocalPlayer","content":"&lt;/&gt; ScryptClient.LocalPlayer: Player    ","version":null,"tagName":"h3"},{"title":"ServicesRBX​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#ServicesRBX","content":"&lt;/&gt; ScryptClient.ServicesRBX: {[Name]: Instance } Contains a dictionary of Roblox services.  ","version":null,"tagName":"h3"},{"title":"ClientNetwork​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#ClientNetwork","content":"&lt;/&gt; ScryptClient.ClientNetwork: ClientNetwork Returns the ClientNetwork class. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"CreateSignal​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#CreateSignal","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.CreateSignal( Name: string, IsPrivate: boolean? ) → Signal Creates and returns a Signal. This is an implementation of BindableEvents. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the event to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"CreateFunction​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#CreateFunction","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.CreateFunction( Name: string, IsPrivate: boolean? ) → Function Creates and returns a Function. This is an implementation of BindableFunctions. What is IsPrivate? IsPrivate is an optional argument that toggles whether you want the function to be used in other scripts. By default this is set to false.  ","version":null,"tagName":"h3"},{"title":"Init​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Init","content":"This item only works when running on the client. Client &lt;/&gt; ScryptClient.Init( EnvironmentLocation: Instance? , DEBUG: boolean? ) → Signal Initializes the framework and loads all shared modules, libraries, and controllers. This function returns an event that fires once everything has been loaded. You can optionally specify the location of environment modules. By default, Scrypt assumes ReplicatedStorage. Usage example: local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Scrypt&quot;)) Scrypt.Init():Wait() print(Scrypt.LocalPlayer) -&gt; zblox164 CAUTION If you are adding libraries, shared modules, or controllers, you do not have to wait for the framework to load. Doing so can cause issues.  ","version":null,"tagName":"h3"},{"title":"Symbol​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Symbol","content":"&lt;/&gt; ScryptClient.Symbol(Name: string?) → Symbol ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ScryptClient","url":"/Scrypt/api/ScryptClient#Symbol","content":"type Symbol = typeof(newproxy(true)) &amp; {[string]: any}   ","version":null,"tagName":"h3"},{"title":"ServerNetwork","type":0,"sectionRef":"#","url":"/Scrypt/api/ServerNetwork","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#types","content":" ","version":null,"tagName":"h2"},{"title":"Packet​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#Packet","content":"&lt;/&gt; type Packet = =number | string | {Packet} | boolean | Instance | buffer | Player | CFrame | Vector3 | Vector2 | Color3 | UDim2 | UDim | Enum | BrickColor    ","version":null,"tagName":"h3"},{"title":"ServerPacketData​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#ServerPacketData","content":"&lt;/&gt; interface ServerPacketData { Address: Player Reliable: boolean Data: Packet }  INFO Currently, changing the .Reliable value does not affect the type of signal that is created. This will be implemented in a later version. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#functions","content":" ","version":null,"tagName":"h2"},{"title":"SendPacketToPlayer​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#SendPacketToPlayer","content":"&lt;/&gt; ServerNetwork.SendPacketToPlayer( Name: string, Packet: ServerPacketData ) → () Sends data to a specific player from the server.  ","version":null,"tagName":"h3"},{"title":"SendPacketToAllPlayers​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#SendPacketToAllPlayers","content":"&lt;/&gt; ServerNetwork.SendPacketToAllPlayers( Name: string, Packet: ServerPacketData ) → () Sends data to all players in a server.  ","version":null,"tagName":"h3"},{"title":"PingPlayer​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#PingPlayer","content":"&lt;/&gt; ServerNetwork.PingPlayer( Name: string, Address: Player , IsReliable: boolean ) → () Pings a specific player. This function should be used when you want to communicate with the client but don't want to send any data.  ","version":null,"tagName":"h3"},{"title":"PingAllPlayers​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#PingAllPlayers","content":"&lt;/&gt; ServerNetwork.PingAllPlayers( Name: string, IsReliable: boolean ) → () Pings all players. This function should be used when you want to communicate with all clients but don't want to send any data.  ","version":null,"tagName":"h3"},{"title":"ListenForPacket​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#ListenForPacket","content":"&lt;/&gt; ServerNetwork.ListenForPacket( Name: string, IsReliable: boolean, Callback: ( Address: Player , ...Packet? ) → () ) → RBXScriptConnection  Listens for data from the client.  ","version":null,"tagName":"h3"},{"title":"ListenForRequest​","type":1,"pageTitle":"ServerNetwork","url":"/Scrypt/api/ServerNetwork#ListenForRequest","content":"&lt;/&gt; ServerNetwork.ListenForRequest( Name: string, Callback: ( Address: Player , ...Packet? ) → ...any ) → () Listens for a request from the client. The client expects a return value so make sure your function returns something. ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Scrypt/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#installation","content":" Installing Scrypt only requires a few simple steps! To start the installation process, you'll first need to get the Scrypt framework. Currently, there are two methods to do this:  Download the .rbxm file as provided in the GitHub repositoryGet Scrypt directly from the Creator Store  Method 1​  Go to the main branch of the official Scrypt repository and download the .rbxm file named 'ScryptModel'. Once you have downloaded the model, simply drag it into your studio session.  Method 2​  If you opt for the second method, you can find Scrypt on the Creator Store here. You should be able to add the framework to your inventory and import it through the toolbox afterwards.    Once you've imported Scrypt into your project, you can begin the next step. Scrypt should come with a root folder that contains several items, each needs to be moved:  Scrypt moduleServices folderControllers folderShared folderPreloader LocalScript  The Scrypt module, 'Controllers' folder, and the 'Shared' folder can all be moved under ReplicatedStorage. The 'Services' folder should be moved to ServerScriptService. Lastly, the Preloader script should be placed in ReplicatedFirst.  info You don't need to use the Preloader LocalScript. You can use a custom preload script if you want (or none at all). By default, the preloader script doesn't do anything except change a global variable Preloaded to true. This can be used if there are assets that you need to preload before the game starts.  After you've moved all the framework components to the proper locations, you can begin using the framework.  ","version":"Next","tagName":"h2"},{"title":"Using Scrypt​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#using-scrypt","content":" The basic usage for Scrypt is quite simple. First, require the module just like any other ModuleScript. After that, we can run the .Init function and wait for the framework to load:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait()   Now that you've properly initialized Scrypt, we can go through some basic features and their usage. Let's start with features that replace a default workflow.  ","version":"Next","tagName":"h2"},{"title":"Bindables Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#bindables-replacement","content":" Scrypt has a built in version of both BindableFunctions as well as BindableEvents. Creating events and functions is quite simple:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local Event = Scrypt.CreateSignal(&quot;Event&quot;) local Function = Scrypt.CreateFunction(&quot;Function&quot;)   Using events should be identical to regular events. Functions are slightly different.  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local Event = Scrypt.CreateSignal(&quot;Event&quot;) local Connection Connection = Event:Connect(function(Data: any) print(Data) --&gt; This is a test end) Event:Fire(&quot;This is a test&quot;) Connection:Disconnect() -- clean up -------------------------------------- local Function = Scrypt.CreateFunction(&quot;Function&quot;) Function:OnInvoke(function(Data: any) return not Data end) local Return = Function:Invoke(true) print(Return) --&gt; false Function:Destroy() -- clean up   ","version":"Next","tagName":"h3"},{"title":"GetService() Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#getservice-replacement","content":" Scrypt loads most Roblox services after you run .Init rendering the use of game:GetService obsolete when using Scrypt. To access a service, simply index the ServicesRBX dictionary with the service you want to get. For example:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local Players = Scrypt.ServicesRBX.Players local ReplicatedStorage = Scrypt.ServicesRBX.ReplicatedStorage   info If you need a service that hasn't been added to the dictionary, you can manually add it in the RBXServices module located in path: Scrypt/Internal. Most services are added, however if Roblox adds a new service and Scrypt hasn't been updated yet, you may need to add it manually if you want to access it through Scrypt.  ","version":"Next","tagName":"h3"},{"title":"Remotes Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#remotes-replacement","content":" Remotes are used whenever you need to communicate with the server from the client or client from the server. Scrypt offers an implementation of remotes. Here is a basic usage example, however for more detailed information, please see the API.  --@client local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() -- To Server local Packet = { Data = &quot;Data being sent to server&quot;, Reliable = true -- NOT IMPLEMENTED } Scrypt.ClientNetwork.SendPacket(&quot;Send&quot;, Packet) local RequestToServer = Scrypt.ClientNetwork.RequestPacket(&quot;Request&quot;, &quot;Data being sent to server&quot;) print(RequestToServer) --&gt; Data received! -- From Server local FromServer FromServer = Scrypt.ClientNetwork.ListenForPacket(&quot;Receive&quot;, true, function(Data) print(Data) --&gt; Data being sent from server end)   --@server local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Scrypt&quot;)) Scrypt.Init():Wait() -- Data from client local DataFromClient DataFromClient = Scrypt.ServerNetwork.ListenForPacket(&quot;Send&quot;, true, function(Address: Player, Data) print(&quot;Incoming data from &quot; .. tostring(Address) .. &quot;: &quot; .. tostring(Data)) end) -- Request from client local RequestFromClient RequestFromClient = Scrypt.ServerNetwork.ListenForRequest(&quot;Request&quot;, function(Address: Player, Data) return &quot;Data received!&quot; end) -- Data to client Scrypt.ServicesRBX.Players.PlayerAdded:Connect(function(Player: Player) local Packet = { Data = &quot;Data being sent from server&quot;, Reliable = true, -- NOT IMPLEMENTED Address = Player } Scrypt.ServerNetwork.SendPacketToPlayer(&quot;Receive&quot;, Packet) end)   ","version":"Next","tagName":"h3"},{"title":"require() Replacement​","type":1,"pageTitle":"Getting Started","url":"/Scrypt/docs/intro#require-replacement","content":" So far the examples have only shown the built in features of Scrypt. You might be asking yourself, &quot;how can I build a game with this?&quot;. The answer is you can use Scrypt to lazily load game modules for you. To utilize this, create a new ModuleScript under ReplicatedStorage/Shared/Modules. You can make this module contain whatever you want. For now, let's just use this as an example:  --!strict --@shared local BasicMath = {} function BasicMath.Add(a: number, b: number): number return a + b end function BasicMath.Subtract(a: number, b: number): number return a - b end function BasicMath.Multiply(a: number, b: number): number return a * b end function BasicMath.Divide(a: number, b: number): number return a / b end return BasicMath   To access this module from other scripts, normally you have to reference the module and then require it to use it. With Scrypt, all you have to do, is specify you want to access the shared modules and then index the name of the module. In this case, the module is named &quot;BasicMath&quot;. In a test script, we can access it with:  local Scrypt = require(game:GetService(&quot;ReplicatedStorage&quot;).Scrypt) Scrypt.Init():Wait() local BasicMath = Scrypt.Shared.BasicMath print(BasicMath.Add(64, 100)) --&gt; 164 print(BasicMath.Subtract(228, 64)) --&gt; 164 print(BasicMath.Multiply(1, 164)) --&gt; 164 print(BasicMath.Divide(328, 2)) --&gt; 164   You don't only have to place your game modules in the Shared/Modules folder. Scrypt loads modules from all of the following locations by default, each with their own purpose:  ReplicatedStorage/Shared/Modules (Server &amp; Client) Modules that are used with both the server and client ReplicatedStorage/Shared/Libraries (Server &amp; Client) Modules that contain specific functions for a specific purpose. For example, a custom quaternion library. ServerScriptService/Services (Server) Game service modules (services docs coming soon). ReplicatedStorage/Controllers (Client) Game controller modules (controller docs coming soon).  tip All modules are lazily loaded! This means modules are only loaded when they are needed instead of all of your scripts being loaded at runtime.    More coming soon! ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}